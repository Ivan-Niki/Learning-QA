
Тест-дизайн – это этап процесса тестирования ПО, на котором проектируются и создаются тест-кейсы, 
в соответствии c определенными ранее критериями качества и целями тестирования. 
Цель тест-дизайна – создать наборы тестовых случаев, обеспечивающих оптимальное тестовое покрытие.

Техники тестирования (Test techniques, Test design techniques) – методы, используемые для создания и/или выбора входных данных и условий выполнения тестов.

Техники тестирования (Test techniques, Test design techniques) – методы, используемые для создания и/или выбора входных данных и условий выполнения тестов.



================== 1. Эквивалентное разбиение (Equivalence partitioning – EP) =================

Техника эквивалентного разбиения (классы эквивалентности) – это разделение диапазона возможных вводимых значений на группы (классы) эквивалентных по своему влиянию на систему. Эта техника помогает не только сокращать количество тестов, но и сохранять приемлемое тестовое покрытие.
Рассмотрим для примера перевод денег в банке. Размер комиссии зависит от суммы перевода:
•	от 1 до 999 долларов включительно – 0%
•	от 1000 до 4999 долларов включительно – 5%
•	от 5000 долларов – 7%
Максимальная сумма перевода – 100000 долларов, при этом дробные числа не учитываются.
Попробуем выяснить, сколько требований будет в этом случае. В этом помогут классы эквивалентности:
•	1-999 => ожидаем комиссию 0%
•	1000-4999 => ожидаем комиссию 5%
•	5000-100000 => ожидаем комиссию 7%
Выбранные значения для проверки: 500, 2500, 7500.
•	На значение 500 система отреагирует так же, как и на любое другое значение из первого диапазона;
•	На значение 2500 система отреагирует так же, как и на любое другое значение из второго диапазона;
•	На значение 7500 система отреагирует так же, как и на любое другое значение из третьего диапазона.




=============== 2. Анализ граничных значений (Boundary Value Analysis - BVA) ==============

Граничные значения – это значения, в которых один класс эквивалентности переходит в другой. По своей сути это техника, которая дополняет технику классов эквивалентности.
Важно проверять граничные значения, потому что именно на границах чаще всего допускаются ошибки при написании кода и формулировании требований.
Например, неопытный программист при постановке «не больше 1000» может поставить значение <1000.
Вернемся к примеру с комиссией:
•	от 1 до 999 долларов включительно – 0%
•	от 1000 до 4999 долларов включительно – 5%
•	от 5000 долларов – 7%
Максимальная сумма перевода – 100000 долларов, при этом дробные числа не учитываются. Вспомним классы эквивалентности:
•	1-999 => ожидаем комиссию 0%
•	1000-4999 => ожидаем комиссию 5%
•	5000-100000 => ожидаем комиссию 7%
Граничные значения: 1, 999, 1000, 4999, 5000, 100000.
С учетом классов эквивалентности и граничных значений выбираем значения для проверки: 1, 500, 999, 1000, 2500, 4999, 5000, 7500, 100000.




=============== 3. Попарное тестирование (Pairwise Testing) ==============

Попарное тестирование – техника тест-дизайна, при которой тест-кейсы формируются так, чтобы выполнить все возможные отдельные комбинации каждой пары входных параметров.
Pairwise testing — техника тест-дизайна, основанная на наблюдениях о том, что большинство дефектов вызвано взаимодействием не более двух факторов (дефекты, которые возникают при взаимодействии трех и более факторов, как правило менее критичны). Следовательно, выбирается пара двух тестовых параметров, и все возможные пары этих двух параметров отправляются в качестве входных параметров для тестирования. Pairwise testing сокращает общее количество тест-кейсов, тем самым уменьшая время и расходы, затраченные на тестирование.
Сформулировать суть попарного тестирования можно следующим образом: формирование таких наборов данных, в которых каждое тестируемое значение каждого из проверенных параметров хотя бы один раз сочетается с каждым тестируемым значением всех других проверяемых параметров.

Главные цели Pairwise Testing:
--> убрать избыточные проверки;
--> обеспечить хорошее тестовое покрытие;
--> выявить наибольшее количество багов на минимальном наборе тестов.


Рассмотрим более подробно суть попарного тестирования на примерах.

------- Пример 1 --------
Предположим, какое значение (например, налог) для человека рассчитывается на основании его пола, возраста и наличия детей – получаем три входных параметра, для каждого из которых для тестов выбираем любое из возможных значений. Например: 
-> пол – мужской или женский; 
-> возраст – до 25, от 25 до 60, свыше 60; 
-> наличие детей – да или нет. 

Для проверки правильности расчетов можно, конечно, перебрать все комбинации значений всех параметров (получится 12 проверок). А можно решить, что не нужно проверять сочетание значений всех параметров со всеми, а только убедиться, что проверятся все уникальные пары значений параметров. К примеру, с точки зрения параметров пола и возраста нужно убедиться, что точно проверим мужчину до 25, мужчину между 25 и 60, мужчину после 60, а также женщину до 25, женщину между 25 и 60, а также женщину после 60. И точно так для всех остальных пар параметров. И таким образом, можем получить гораздо меньше наборов значений (в них есть все пары значений, правда, некоторые дважды). Таким образом у нас получится всего 6 проверок.


------- Пример 2 --------
Есть два браузера Opera и Firefox. Имеются две операционные системы Windows и Linux. Здесь ничего не убавить, так как из них можно составить 4 конфигурации.
_______________________
№ |	Browser	|  OS      |
-----------------------|
1 |	Opera	|  Windows |
2 |	Firefox	|  Linux   |
3 |	Opera	|  Linux   |
4 |	Firefox	|  Windows |
-----------------------|

Предположим, сайт на двух языках: русский (RU) и английский (EN). Для полного перебора умножим эти 4 конфигурации на 2, то есть каждую из предыдущих конфигураций проверить с обоими языками. Но зачем? Вместо этого воспользуемся попарным подходом и вместо 8 конфигураций получим снова 4.
__________________________________
№ |	Browser	|    OS    | Language |
----------------------------------|
1 |	Opera	|  Windows |   RU     |
2 |	Firefox	|  Linux   |   RU     |
3 |	Opera	|  Linux   |   EN     |
4 |	Firefox	|  Windows |   EN     |
----------------------------------|

Далее сайт может использовать MySQL, Oracle и MSSQL как базу данных. Просто используя попарное тестирование 
получаем 7 конфигураций (а не 12 – предварительные 4х3, и тем более не 24 = 8х3).



-------------- Пример 3 --------------
Метод Pairwise используется, когда количество входных параметров велико. Например, мы хотим протестировать разделы системного диска с параметрами:

Type:          Primary, Logical, Single, Span, Stripe, Mirror, RAID-5
Size:          10, 100, 500, 1000, 5000, 10000, 40000
Format method: quick, slow
File system:   FAT, FAT32, NTFS
Cluster size:  512, 1024, 2048, 4096, 8192, 16384, 32768, 65536
Compression:   on, off

В Итоге получается 4 704 комбинацией случаев. Метод парного тестирования позволяет существенного сократить количество комбинаций.
Для удобства получения выходного множества тестов существует программа PICT (от Microsoft). Программа работает из командной строки.
Например, сохраним описанные ранее параметры в текстовый файл и назовем его Model.txt
В нужной папке вызываем командную строку. В командной строке вводим команду, содержащую входной и выходной файл:

pict model.txt > model_out.xls

Входной файл model.txt, в выходном файле model_out.xls будет содержаться таблица всех возможных тестов по методу парного тестирования. В нашем случае количество тест кейсов уменьшилось с 4704 до 60. Это существенно сократит 
время и ресурсы на тестирование.

Помимо PICT, есть множество других инструментов для расчёта уникальных пар. Например:
--> PairwiseTool - https://pairwise.teremokgames.com/



=============== 4. Тестирование каждого выбора (Each Choice Testing) ==============

Данная техника также имеет название "Метод минимальных проверок".
Суть техники: каждое значение каждого конкретного апараметра должно использоваться хотя бы раз в тестовом наборе.
Таким образом, результирующее количество комбинаций будет равно количеству значений параметра с наибольшим диапазоном.
Другими словами, метод минимальных проверок - это когда минимальное количество тестов равно 
максимальному количеству значений какого-то параметра.




=============== 5. Тестирование базового выбора (Base Choice Testing) ==============

Для данной стратегии мы должны определить базовые значения для каждого параметра, на основе которых 
создаются тест-кейсы, дополняемые другими значениями. 
Базовые значения фиксируются как обязательные в каждом тест-кейсе.
Базовыми значениями могут выбираться самые распространённые, самые маленькие и большие значения, критически важные значения, которые чаще всего применяются, или при использовании которых чаще всего возникают баги.
Суть техники: мы должны изменять значения каждого параметра по одному, сохраняя при этом значения других параметров, которые зафиксированы как базовые.

