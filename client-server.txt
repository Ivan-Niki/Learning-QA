
------------ Клиент-серверная архитектура ------------

Архитектура «клиент-сервер» — компьютерная система, в которой множество клиентов (компьютеров) запрашивают и получают данные на центральном сервере. В этой модели есть три компонента: отображение, логика, и данные.
Клиент — это аппаратный или программный компонент вычислительной системы, посылающий запросы серверу.
Программа, являющаяся клиентом, взаимодействует с сервером, используя определённый протокол. Она может запрашивать с сервера какие-либо данные, манипулировать данными непосредственно на сервере, запускать на сервере новые процессы и т.п.

Сервер (от англ. server — обслуживающий) — сетевой компьютер (устройство), обрабатывающий запросы от других компьютеров в локальной или глобальной сети. Как правило, сервер выделен из всей группы компьютеров, подключенных к единой сети, работает автономно, без участия человека, за исключением первичной настройки. Также под этим термином подразумевается программное обеспечение, обрабатывающее пользовательские запросы.

ТИПЫ СЕРВЕРОВ: веб-сервер, сервер приложения, прокси-сервер, почтовый сервер, файловый сервер,
виртуальный сервер, сервер баз данных.



Существует три базовых типа клиент-серверной архитектуры: 2-уровневая, 3-уровневая, и n-уровневая. 


--- Толстые и тонкие клиенты ---
Если обработка логики и данных осуществляется на стороне клиента, то клиентский (например) ноутбук называется толстым клиентом.
Если это обрабатывается на сервере (оставляя у пользователя только отображение результата), то его ноутбук можно назвать тонким клиентом.



------ Двухуровневая клиент-серверная архитектура --------

В такой архитектуре уровень презентации (отображения, представления) — находится на компьютере (смарфоне) клиента, а уровень логики и данных — на сервере.



------ Трехуровневая клиент-серверная архитектура --------

Если объем вычислений огромен, и большая часть их происходит на сервере, то логика и данные могут быть разнесены по двум отдельным уровням (уровень логики и уровень данных); так получается 3-уровневая архитектура.
Вся «логическая часть» отправленного запроса будет обрабатываться на одном уровне, а часть обработки данных, касающихся этого запроса — на другом уровне; после обработки «финальный» ответ будет отправлен клиенту «назад по цепочке».

       запрос                   запрос
Клиент -------> Уровень логики --------> Уровень данных
       <-------                <-------
         ответ                  ответ




------- Многоуровневая клиент-серверная архитектура --------

Если ИТ-система еще больше (уровня большой корпорации с миллионами пользователей), а обработка данных еще более сложная и объемная, то в такой ИТ-системе может быть еще больше уровней (условно n уровней); чаще всего вводится уровень кэширования между уровнями логики и данных, а также уровень балансировки нагрузки, и прокси-уровни (м.б. несколько) между «базовыми» уровнем клиента и уровнем обработки логики.
В многоуровневой архитектуре применяются кластеры серверов — когда приложение (уровень логики) находится не на одном, а сразу на нескольких серверах. Информация на таких серверах дублируется. В кластере может быть не 2 сервера, а 10, 15, сколько нужно, столько и ставим.
Если один сервер вышел из строя, то его подменяет другой. Это дает время, чтобы устранить неисправности сервера так, что пользователи и не заметят.
Еще кластеры используются, чтобы распределять нагрузку. Мы уже говорили, что сервер может отключиться от десятка миллионов одновременных запросов. Кластеры можно настроить так, чтобы при десяти миллионах запросов они ушли не на один сервер, а на разные.
Чтобы определить, на какой сервер послать запрос, используется балансировщик — сервис, который пропускает все запросы через себя и следит, чтобы серверы не перегружались.


Клиент --> Балансировщик нагрузки/или прокси --> Логика (несколько серверов) --> Кэширование --> Данные




------- Что такое кэш (cash) и куки (cookie) --------

1) Кэш — это память программы или устройства, в которой сохраняются временные или часто используемые файлы для быстрого доступа к ним. Это увеличивает скорость работы приложений и операционной системы.
2) Кэш – это часть места на жестком диске, предназначенная для хранения файлов браузера, которые, согласно оценкам браузера, могут быть использованы повторно. Без этой функции браузер работал бы медленнее, поскольку при открытии каждого веб-сайта должно было бы загружаться большое количество файлов с нуля, включая такие компоненты, как логотип сайта, фоновые изображения, шрифты, а также технические элементы, такие как CSS, HTML и JavaScript. В совокупности их количество может достигать десятков, сотен или даже тысяч файлов для одного веб-сайта. В кеше эти файлы хранятся локально, поэтому при будущих посещениях веб-сайты будут загружаться быстрее, что улучшит общее впечатление от работы в интернете.

Для примера рассмотрим кэш браузера. Это папка с файлами, которые браузер загрузил в память устройства. В файлах могут быть видео, музыка, изображения или скрипты с какого-то сайта. Когда вы в следующий раз вернётесь на сайт, то браузер не будет запрашивать эти файлы, а возьмёт их из кэша. Нужная вам страница загрузится быстрее.
Увидеть, как кэшируются файлы, можно при просмотре онлайн-видео. Пока вы смотрите видеоролик, он загружается в кэш вашего устройства. Если видео загрузится полностью, его можно будет досмотреть даже с отключённым интернетом.


----- Зачем чистить кэш? -----
Проблема может возникнуть, если на сервере страница обновится, а браузер продолжает подгружать старую версию из кэша. Веб-страницы могут отображаться некорректно в связи с тем, что в них были внесены изменения, а браузер продолжает использовать устаревшие данные из кэша. С накоплением кэша место на компьютере, пусть незначительно, но уменьшается.

----- Как почистить кэш? -----
Есть разные способы его очистки, но мы продолжим использовать «Инструменты разработчика». Переходим на интересующий веб-сайт, нажимаем F12, потом опять Application. 
Далее выбираем Clear storage и скроллим вниз. Смотрим, чтобы стояла галочка напротив Cashe storage и нажимаем кнопку Clear site Data. 
Обратите внимание, что тут же можно почистить сразу и куки, да и не только их.



Файлы cookie – это простые текстовые файлы, которые веб-сайт может хранить в браузере. Они предназначены для идентификации пользователей, хранения данных для входа на сайт и создания персонализированных веб-страниц, учитывающих индивидуальные предпочтения.

--> Cookie - это файлы, содержащие информацию в формате "ключ=значение", которые генерируются сервером при первом запросе, зашифровываются и отправляются в ответе. 
После этого куки отсылаются вместе с каждым последующим запросом на сервер. 
--> Значения в куках хранятся в виде зашифрованных строковых данных (ключ дешифровки есть только на сервере).
--> Cookie нужны бэк-энду, но клиент может получить к ним доступ через:
1) document.cookie;
2) F12 --> Application --> Storage --> Cookies --> выбрать сайт --> ПКМ - clear;

--> Cookie имеют срок годности (expires, max-age). 
Например: expires=Tue, 19 Jan 2038 03:14:07 GMT; max-age=3600 (expires определяет дату истечения срока действия куки, когда браузер удалит его автоматически; max-age определяет срок действия куки в секундах с текущего момента).
По умолчанию, если куки не имеют ни одного из этих параметров, то они удалятся автоматически при закрытии браузера. Такие куки называются сессионными («session cookies»).

--> Cookie ассоциируются с определенным доменом (vk.com, google.com, ok.ru и т.д.);
--> Cookie имеют отграничение в 3 Kb на сайт (домен);
--> Cookie запрещают доступ (чтение или запись) на клиенте. Для этого выставляется флаг - HttpOnly (только на сервере).
--> Cookie запрещают доступ на обычном протоколе HTTP. Для этого выставляется флаг Secure. После этого к cookie можно получить доступ только на HTTPS.
По умолчанию куки, установленные сайтом http://site.com, также будут доступны на сайте https://site.com и наоборот.
То есть, куки, по умолчанию, опираются на доменное имя, они не обращают внимания на протоколы.
С этой настройкой, если куки будет установлено на сайте https://site.com, то оно не будет доступно на том же сайте с протоколом HTTP, как http://site.com. Таким образом, если в куки хранится конфиденциальная информация, которую не следует передавать по незашифрованному протоколу HTTP, то нужно установить этот флаг.

---------- Какие основные задачи выполняют куки-файлы и в чем они помогают пользователям: -------

- Аутентификация — в процессе участвуют cookie-файлы, где находятся данные вашего логина, email и пароля. При повторном входе соответствующие поля заполнятся автоматически. Кроме того, они позволяют вам всегда оставаться «в аккаунте» и не попадать на страницу авторизации при обновлении страницы. Например, благодаря cookie при повторном входе в социальную сеть вы сразу видите свою ленту.
- Сохранение настроек и данных — куки фиксируют, какие действия вы совершали на сайте и какие персональные настройки выстраивали (например, язык, валюта, размер шрифта). Например, на сайте по поиску авиабилетов сохраняется информация о языке, валюте, планируемых локациях, дате, а также выбранный билет в корзине. При перезагрузке сайта или выходе из него все фильтры и неоплаченные товары сохраняются.
- Статистика о пользователе — задавая настройки или кликая на понравившийся товар, вы неосознанно рассказываете о ваших интересах и предпочтениях. Куки отмечают эту информацию и помогают персонализировать ваш последующий поиск.

Также куки умеют запоминать:
- текст, который мы вводили на сайте раньше;
- IP-адрес и местоположение;
- товары, которые мы просматривали или добавили в корзину;
- версию ОС и браузера;
- клики и переходы;


---------- Типы cookie-файлов ----------

--> Постоянные куки
Основной вид куков, которые запоминают ваши действия и передаются при каждом посещении сайта. Именно они сохраняют все ваши данные в долгосрочной перспективе, однако с определенным сроком годности. Пользователь может очистить их сам, когда захочет. Чуть позже мы расскажем, как очистить куки сайта.
--> Временные куки
Куки, которые сопровождают посетителя сайта только на протяжении сессии. После закрытия сайта данный тип куков удаляется самостоятельно.
--> Third-party cookies, или сторонние куки
В отличие от прошлых двух типов, данный вид куков не сохраняется на вашем устройстве. Если на сайте размещен кликабельный материал со сторонних сайтов вроде баннеров или на сайте встроены браузерные скрипты (например, Google Analytics и т.п.), то информация с вашими действиями уходят к владельцам этого контента. Этими видами куков пользуются маркетологи, которые проводят анализ посещаемости и количества кликов.
--> и др.


Файлы cookie - cлужебные файлы, хранящие настройки сайтов, которые пользователи посещали. Самая распространённая функция - сохранение паролей, которая позволяет не вводить комбинацию логин + пароль каждый раз при входе на сайт.  В зависимости от настроек, каждый браузер хранит информацию о паролях разное время.
Также куки могут среагировать, если пользователь, например, перейдет по ссылке с какого-либо баннера. В дальнейшем информация, сохраненная в куки, может влиять на виды рекламных баннеров, которые отображаются у пользователя.



Вот несколько примеров использования куки на практике:
1. Авторизация на сайте. Как известно большинство сайтов имеют авторизацию (ввод пароля, логина, телефона, почты и т. п.). Cookie могут применяться сервером для опознания ранее аутентифицированных пользователей.
2. Корзина в интернет-магазинах. Если не использовать куки, при выборе товара и переходе на новую страницу товар может исчезнуть.
3. Настройки. К примеру, вы выставили нужные настройки региона, языка и т. д. Без куки они могут сброситься и вернуться в статус значений по умолчанию.


----- Зачем  чистить cookie? -----
Воспользовавшись компьютером, посторонний человек может посещать форумы и сайты под именем владельца компьютера. Большое количество сохраняемых кук ведет к сокращению места на жестком диске. Пользуясь куки, можно проследить историю перемещений в сети, что нежелательно с точки зрения конфиденциальности.

----- Как почистить кэш и куки? -----
Куки можно почистить в инструментах разработчика. Для Google Chrome нажмите F12, потом вкладку Application (вы должны находиться на странице сайта, куки которого собрались чистить). 
То есть надо будет выбрать адрес сайта под строкой Cookie, нажать правую кнопку мыши, а потом «Clear».



----- В чем разница между кэшем и файлами cookie? -----

И кеш, и файлы cookie предназначены для повышения производительности веб-сайтов и удобства работы пользователей за счет хранения данных на устройствах. Однако между ними есть следующие различия:

Файлы cookie используются для хранения информации о различных аспектах работы пользователя, а кеш используется для ускорения загрузки веб-страниц.
В файлах cookie хранится такая информация, как пользовательские настройки, а в кеше хранятся файлы ресурсов: аудио, видео или флэш-файлы.
Срок хранения файлов cookie обычно ограничен, а кеш хранится на устройстве пользователя до тех пор, пока не будет удален вручную.







---------------- Коды состояния HTTP ----------------

Обозначим ключевые термины:

--> Клиент — это программное или аппаратное обеспечение, имеющее подключение к интернету и запрашивающее некоторую функцию или данные у сервера.
--> Сервер — это компьютер, на котором хранятся данные. Он выполняет ряд служебных функций для других компьютеров сети, принимает клиентские запросы и отвечает на них.

Существует 5 категорий серверных ответов. Класс состояния можно определить по первой цифре.

1** — информационные сообщения, передача данных (не ошибка).
2** — успешный запрос (не ошибка).
3** — перенаправления на другой адрес (не ошибка).
4** — клиентские ошибки.
Код состояния HTTP - часть первой строки ответа сервера, который информирует клиента о результате запроса. Состоит он из трех цифр, первая из которых указывает на класс состояния. За цифрами идет фраза, которая объясняет причину ответа.
5** — серверные ошибки. Причина технической ошибки со стороны сервера указывается в коротком текстовом описании после кода. Например, ошибка 500 — это внутренние сбои, реже — высокая нагрузка на сервер.



-------- 1xx - информационные коды --------

-> 100	Continue (Продолжай)
Сервер удовлетворён начальными сведениями о запросе, и клиент может продолжать.

-> 101	Switching Protocols	(Переключение протоколов)
Клиент, пославший запрос, предлагает перейти на более подходящий для указанного ресурса протокол.

-> 102 Processing (Обработка)
Поскольку запрос WebDAV (протокол передачи), кроме основного запроса может включать и ряд других подзапросов, подразумевая также и файловые операции, то для его выполнения может потребоваться больше времени.

-> 103	Checkpoint	(Контрольная точка)
Используется в запросах с возможностью продолжения для возобновления после прерывания запросов POST или PUT.




-------- 2xx - Success (Успех) --------

-> 200	OK
OK — успешный запрос. HTTP запрос успешно обработан.

-> 201	Created (Создано)
В результате успешного выполнения запроса был создан новый ресурс. 
Этот код обычно присылается в ответ на запрос PUT.

-> 202	Accepted (Принято)
Запрос был принят в обработку, но обработка еще не завершена.

-> 203 Non-Authoritative Information (Недостоверная/неавторитетная информация)
Запрос был успешно обработан (аналогично ответу 200), но в этом случае передаваемая информация была взята не из первичного источника (например, из резервной копии или другого сервера) и может быть неактуальной.

-> 204 No Content ("Нет содержимого")
Запрос был успешно обработан, но не вернул какой-либо контент. 
Нет содержимого для ответа на запрос, но заголовки ответа, которые могут быть полезны, присылаются. Клиент может использовать их для обновления кешированных заголовков полученных ранее для этого ресурса.

-> 205 Reset Content ("Сбросить содержимое")
Запрос был обработан, но не вернул контент. При этом требуется сброс введенных данных клиентом.
Этот код присылается, когда запрос обработан, чтобы сообщить клиенту, что необходимо сбросить отображение документа, который прислал этот запрос.
Аутентификация при помощи форм может быть успешной или неудачной. При неудачном выполнении обычно повторно отображается форма с очищенными полями.
И как раз для этого предназначен код состояния 205:
"HTTP-код состояния 205 Reset Content сообщает клиенту, что нужно сбросить визуализацию документа, то есть, например, очистить содержимое формы, сбросить состояние canvas или обновить UI". -- [Веб-документация MDN]

-> 206	Partial Content ("Частичное содержимое")
Сервер возвращает только часть контента, которая соответствует заголовку, отправленному клиентом. 
В основном его используют расширенные инструменты кэширования. 
Такое бывает, когда пользователь хочет получить лишь небольшую часть контента страницы, а сервер в своем ответе предоставляет данные только для этой части страницы.

-> 207 Multi-Status (Мультистатус)
Сервер параллельно предоставляет результаты нескольких независимых операций, которые включаются в тело сообщения в виде XML-документа.




-------- 3xx - Redirection - Редирект (перенаправление) --------

Коды состояния HTTP 3xx указывают на перенаправление. Когда пользователь или поисковые системы сталкиваются с кодом состояния 3xx, они будут перенаправлены на URL, отличный от исходного. Если SEO важен для успеха вашего бизнеса, тогда вы должны узнать об этих кодах и о том, как их правильно использовать.

-> 300 Multiple Choices ("Множественный выбор")
Выбор из нескольких вариантов
Сервер передаёт с сообщением список из нескольких возможных вариантов перенаправления альтернатив (максимум 5 вариантов). Клиент может выбрать один из них.

-> 301 Moved Permanently ("Перемещён на постоянной основе")
Этот код ответа значит, что URL запрашиваемого ресурса был изменён. 
Возможно, новый URL будет предоставлен в ответе.

-> 302 Found ("Найдено")
Найдено/временно перемещено
Запрашиваемая страница была найдена / временно перенесена на другой URL.
Этот код ответа значит, что запрошенный ресурс временно изменён. Новые изменения в URI могут быть доступны в будущем. Таким образом, этот URI, должен быть использован клиентом в будущих запросах.

-> 303 See Other ("Смотрите другое")
Просмотр других ресурсов
Этот код ответа присылается, чтобы направлять клиента для получения запрашиваемого ресурса в другой URI с запросом GET.

-> 304 Not Modified ("Не модифицировано")
Используется для кеширования. Это код ответа значит, что запрошенный ресурс не был изменён. 
Таким образом, клиент может продолжать использовать кешированную версию ответа.

-> 305 Use Proxy ("Использовать прокси")
Это означает, что запрошенный ресурс должен быть доступен через прокси. 
Этот код ответа в основном не поддерживается из соображений безопасности.

-> 306 Switch Proxy ("Переключить прокси")
Изначально он означал, что «последующие запросы должны использовать указанный прокси», но в настоящее время не используется.

-> 307 Temporary Redirect ("Временное перенаправление")
Сервер отправил этот ответ, чтобы клиент получил запрошенный ресурс на другой URL-адрес с тем же методом, который использовал предыдущий запрос. 
Данный код имеет ту же семантику, что код ответа 302 Found, за исключением того, что агент пользователя не должен изменять используемый метод HTTP: 
если в первом запросе использовался POST, то во втором запросе также должен использоваться POST.

