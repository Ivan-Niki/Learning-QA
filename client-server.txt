
------------ Клиент-серверная архитектура ------------

Архитектура «клиент-сервер» — компьютерная система, в которой множество клиентов (компьютеров) запрашивают и получают данные на центральном сервере. В этой модели есть три компонента: отображение, логика, и данные.
Клиент — это аппаратный или программный компонент вычислительной системы, посылающий запросы серверу.
Программа, являющаяся клиентом, взаимодействует с сервером, используя определённый протокол. Она может запрашивать с сервера какие-либо данные, манипулировать данными непосредственно на сервере, запускать на сервере новые процессы и т.п.

Сервер (от англ. server — обслуживающий) — сетевой компьютер (устройство), обрабатывающий запросы от других компьютеров в локальной или глобальной сети. Как правило, сервер выделен из всей группы компьютеров, подключенных к единой сети, работает автономно, без участия человека, за исключением первичной настройки. Также под этим термином подразумевается программное обеспечение, обрабатывающее пользовательские запросы.

ТИПЫ СЕРВЕРОВ: веб-сервер, сервер приложения, прокси-сервер, почтовый сервер, файловый сервер,
виртуальный сервер, сервер баз данных.



Существует три базовых типа клиент-серверной архитектуры: 2-уровневая, 3-уровневая, и n-уровневая. 


--- Толстые и тонкие клиенты ---
Если обработка логики и данных осуществляется на стороне клиента, то клиентский (например) ноутбук называется толстым клиентом.
Если это обрабатывается на сервере (оставляя у пользователя только отображение результата), то его ноутбук можно назвать тонким клиентом.



------ Двухуровневая клиент-серверная архитектура --------

В такой архитектуре уровень презентации (отображения, представления) — находится на компьютере (смарфоне) клиента, а уровень логики и данных — на сервере.



------ Трехуровневая клиент-серверная архитектура --------

Если объем вычислений огромен, и большая часть их происходит на сервере, то логика и данные могут быть разнесены по двум отдельным уровням (уровень логики и уровень данных); так получается 3-уровневая архитектура.
Вся «логическая часть» отправленного запроса будет обрабатываться на одном уровне, а часть обработки данных, касающихся этого запроса — на другом уровне; после обработки «финальный» ответ будет отправлен клиенту «назад по цепочке».

       запрос                   запрос
Клиент -------> Уровень логики --------> Уровень данных
       <-------                <-------
         ответ                  ответ




------- Многоуровневая клиент-серверная архитектура --------

Если ИТ-система еще больше (уровня большой корпорации с миллионами пользователей), а обработка данных еще более сложная и объемная, то в такой ИТ-системе может быть еще больше уровней (условно n уровней); чаще всего вводится уровень кэширования между уровнями логики и данных, а также уровень балансировки нагрузки, и прокси-уровни (м.б. несколько) между «базовыми» уровнем клиента и уровнем обработки логики.
В многоуровневой архитектуре применяются кластеры серверов — когда приложение (уровень логики) находится не на одном, а сразу на нескольких серверах. Информация на таких серверах дублируется. В кластере может быть не 2 сервера, а 10, 15, сколько нужно, столько и ставим.
Если один сервер вышел из строя, то его подменяет другой. Это дает время, чтобы устранить неисправности сервера так, что пользователи и не заметят.
Еще кластеры используются, чтобы распределять нагрузку. Мы уже говорили, что сервер может отключиться от десятка миллионов одновременных запросов. Кластеры можно настроить так, чтобы при десяти миллионах запросов они ушли не на один сервер, а на разные.
Чтобы определить, на какой сервер послать запрос, используется балансировщик — сервис, который пропускает все запросы через себя и следит, чтобы серверы не перегружались.


Клиент --> Балансировщик нагрузки/или прокси --> Логика (несколько серверов) --> Кэширование --> Данные




------- Что такое кэш (cash) и куки (cookie) --------

Кэш – это часть места на жестком диске, предназначенная для хранения файлов браузера, которые, согласно оценкам браузера, могут быть использованы повторно. Без этой функции браузер работал бы медленнее, поскольку при открытии каждого веб-сайта должно было бы загружаться большое количество файлов с нуля,
включая такие компоненты, как логотип сайта, фоновые изображения, шрифты, а также технические элементы, такие как CSS, HTML и JavaScript. В совокупности их количество может достигать десятков, сотен или даже тысяч файлов для одного веб-сайта. В кеше эти файлы хранятся локально, поэтому при будущих посещениях веб-сайты будут загружаться быстрее, что улучшит общее впечатление от работы в интернете.

----- Зачем чистить кэш? -----
Проблема может возникнуть, если на сервере страница обновится, а браузер продолжает подгружать старую версию из кэша. Веб-страницы могут отображаться некорректно в связи с тем, что в них были внесены изменения, а браузер продолжает использовать устаревшие данные из кэша. С накоплением кэша место на компьютере, пусть незначительно, но уменьшается.



Файлы cookie – это простые текстовые файлы, которые веб-сайт может хранить в браузере. Они предназначены для идентификации пользователей, хранения данных для входа на сайт и создания персонализированных веб-страниц, учитывающих индивидуальные предпочтения. Более подробная информация о файлах cookie приведена здесь.

Файлы cookie - cлужебные файлы, хранящие настройки сайтов, которые пользователи посещали. Самая распространённая функция - сохранение паролей, которая позволяет не вводить комбинацию логин + пароль каждый раз при входе на сайт.  В зависимости от настроек, каждый браузер хранит информацию о паролях разное время.
Также куки могут среагировать, если пользователь, например, перейдет по ссылке с какого-либо баннера. В дальнейшем информация, сохраненная в куки, может влиять на виды рекламных баннеров, которые отображаются у пользователя.

----- Зачем  чистить cookie? -----
Воспользовавшись компьютером, посторонний человек может посещать форумы и сайты под именем владельца компьютера. Большое количество сохраняемых кук ведет к сокращению места на жестком диске. Пользуясь куки, можно проследить историю перемещений в сети, что нежелательно с точки зрения конфиденциальности.

