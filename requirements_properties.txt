
=========== Уровни требований: ===========

1) Бизнес-требования (business requirements). 
Отвечают на вопрос: "Зачем создаётся приложение, какие проблемы оно решает, как будет выполняться проект по реализации продукта.
Пример: необходимо реализовать приложение для быстрой конвертации валют.

2) Требования пользовательского уровня (user requirements).
Отвечают на вопрос: "Кто и как взаимодействовует с продуктом".
Пример: у пользвателя должна быть возможность сортировать товар по цене.

3) Требования уровня реализации (functional & non-functional requirements).
К этому уровню относятся все функциональные и нефункциональные требования (ограничения, требования к интерфейсам и данным).

Пример 1: в поле "Имя" можно ввести только латинские символы и цифры от 0 до 10.
Пример 2: функциональные требования по работе с электронным заказом - заказ может быть создан, отредактирован, удалён и перемещён с участка на участок.


=========== СВОЙСТВА ХОРОШИХ ТРЕБОВАНИЙ: ===========

1) Завершённость и ясность.
После прочтения требования у тестировщика не должно остаться никаких дополнительных вопросов.

2) Атомарность, единичность (atomicity).
Требование является атомарным, если его нельзя разбить на отдельные требования без потери завершенности и оно описывает одну и только одну ситуацию.

3) Актуальность.
В процессе реализации приложения некоторые требования приходится менять. Нужно следитьт, чтобы все изменения были зафиксированы в спецификации.

4) Непротиворечивость.
Требования не должны противоречить самим себе и другим требованиям.

5) НЕдвусмысленность.
Требования должны быть НЕдвусмысленными. В требованиях не должно быть фраз "и так далее", "нормально", "просто", "результативно".

6) Выполнимость.
Требования должны быть выполнимыми. Должна быть возможнсоть реализовать требования. 
Стоит иметь в виду, что требование может быть реализуемо в целом, но в рамках бюджета проекта или ограничении по времени - оно нереализуемо. 
При наличии труднореализуемых требований следует консультироваться с командой разработчиков и менеджером о целесообразности реализации данного функционала.

7) Прослеживаемость.
Требования должны быть прослеживаемыми. Очень трудно работать с требованиями, которые оформлены обычным текстом. Идеально, когда у каждого требования есть свой УНИКАЛЬНЫЙ НОМЕР, 
когда требования разбиты на группы и подгруппы в зависимости от функционала, к которому относятся.

8) Проранжированность по важности.
Важные требования, которые описывают основной функционал, должны быть отмечены как Major или Main или другим маркером, принятым на проекте.



============= ПРИНЦИПЫ ТЕСТИРОВАНИЯ ТРЕБОВАНИЙ =============

1) Тестирование требований при возможности лучше проводить ДО СТАРТА разработки.
2) Самый лучший способ протестировать требования - составить по ним тест-кейсы.
3) Тестировать требования должен НЕ тот член команды, который эти требования писал.
4) При обнаружении бага в требованиях необходимо завести дефект и предупредить о нем команду разработчиков (если уже начался этап разработки).
5) Уровень детализации требований зависит от сложности приложения. Не стоит тратить время и описывать явные требования.




