Управление разработкой программ и приложений — это, в первую очередь, создание структуры. 
Когда все этапы распланированы, можно спокойно по ним двигаться. 
Однако разным командам удобны разные методологии разработки ПО. 
Один вариант подходит для больших проектов, другой — для малых.

Методологии разработки — это наборы правил, ролей и основных задач, которыми руководствуются при создании ПО.
Методологии обеспечивают структурированный подход к созданию программы, определяют этапы работы и задают обязанности команды разработчиков.
У каждого подхода свои плюсы и минусы. Выбор зависит от особенностей компании и команды — и, конечно, 
для достижения лучшего результата стоит знать сильные и слабые стороны выбранного подхода.

Методология разработки — это набор принципов, ролей и практик, регулирующих процесс создания программы. 
Они предполагают тщательное планирование жизненного цикла разработки. 
Но есть важная особенность — они не прописывают конкретные технические моменты реализации.

Среди подходов (методологий) к созданию программных продуктов выделяют следующие варианты:

- waterfall – «водопад», каскадный прием;
- v-model – подход, реализуемый посредством тестирования;
- incremental model – инкрементная модель;
- iterative – итеративная;
- spiral – спиральный вариант;

- code and fix – кодирование и устранение ошибок;
- chaos model – «хаотичная» модель;
- prototype – прототипная.



============== 1. «Waterfall Model» (каскадная модель или «водопад») ==============
Впервые метод появился в 1970-х годах. 
Водопадная модель разработки — это линейный подход к разработке программного обеспечения. 
Она характеризуется строгим, структурированным процессом. Основной принцип — каждый этап проекта должен быть завершен до начала следующего. 
Как правило, модель состоит из следующих этапов разработки: 

1 - Cистемный анализ 
2 - Анализ требований 
3 - Проектирование
4 - Реализация (кодирование/разработка)
5 - Тестирование
6 - Внедрение
7 - Сопровождение

Плюсы водопадной модели:
- Эта методология хорошо подходит для проектов со строгими и понятными требованиями.
- Много внимания уделяется тщательному документированию каждого этапа разработки.
- Водопадная модель простая, четкая и понятная. Её легко внедрить в рабочий процесс благодаря простым фазам, которые идут строго по порядку.

Минусы водопадной модели:
- Недостаточно гибкости. После завершения какого-либо этапа сложно вернуться назад и внести изменения, не нарушая последующие этапы.
- Может быть проблематично применять в проектах, где нужны итерации и частая обратная связь от владельца продукта.
- Предполагает ограниченную вовлеченность владельца продукта, поскольку он участвует в проекте в основном в начале и в конце его реализации.
- Фаза тестирования наступает в конце проекта, поэтому проблемы и ошибки могут быть выявлены не сразу — а устранять их будет дорого и сложно.


Водопадная модель не лучшим образом подходит для сложных и крупных продуктов. 
Связано это с тем, что при обнаружении ошибки, ее исправление окажется долгим и дорогостоящим. 
А если у заказчиков в процессе создания контента появятся пожелания или критика, то разрабам предстоит
переписывать почти всю кодификацию.

«Водопад» сгодится для космической и медицинской отраслей, где уже есть база документации. 
Основная задача для успешной реализации проекта по подобному принципу – это написание подробных требований к разработке. 
В процессе осуществления тестинга должно быть минимум ошибок или полное их отсутствие.
Водопадная модель лучше всего подходит для проектов с ясной конечной целью и четко определенными требованиями, которые вряд ли изменятся по ходу разработки. 
Она будет хорошо работать, если технологии, инструменты и процессы хорошо отлажены и не меняются.


============== 2. «V-Model» (V-образная модель / разработка через тестирование) ==============
V-модель – это высокодисциплинированная модель SDLC, в которой параллельно с каждым этапом разработки предусмотрен этап тестирования. 
V-модель является расширенной версией каскадной модели (Waterfall), в которой разработка и тестирование программного обеспечения выполняются последовательно. 
Она также известна как модель валидации или верификации.

Это усовершенствованная каскадная модель, в которой заказчик вместе с командой программистов одновременно 
составляют требования к системе и описывают, как будут тестировать её на каждом этапе.
Требования выдвигаются для каждого этапа разработки.

  [Верификация]                                [Валидация]
1.Бизнес-требования    - - - - - - - - -   9.Приемочное тестирование
 2.Функцион. требования  - - - - - - -   8.Функцион. тестирование 
   3.Архитектура системы   - - - - -   7.Интеграционное тестирование 
    4.Архитектура компонентов  - -   6.Модульное тестирование
		                  5.Разработка

Когда использовать V-модель?
- Если требуется тщательное тестирование продукта, то V-модель оправдает заложенную 
в себя идею: validation and verification.
- Для малых и средних проектов, где требования четко определены и фиксированы.
- В условиях доступности инженеров необходимой квалификации, особенно тестировщиков.

V-модель применяется в сферах, где работа продукта не может быть остановлена. 
Например, разработка ПО для авиации представляет собой сложный документированный процесс, где каждый уровень
тщательно прописывается и отслеживается любая ошибка. 
Тестирование начинается только после глубокого анализа требований, описанных в документах. 
Такой процесс занимает много времени и требует высокого уровня профессионализма от исполнителей.



============== 3. «Incremental Model» (инкрементная модель) ==============

Инкрементная модель – это такая модель разработки, в которой «сборка» ПО происходит поэтапно: 
от базовой модификации до самой продвинутой, финальной. 
Такое развитие модификации происходит путем постепенного добавления новых функций (их называют «инкременты», от английского слова Increment – приращение).
В инкрементной модели полные требования к системе делятся на различные сборки. 
Терминология часто используется для описания поэтапной сборки ПО.
Имеют место несколько циклов разработки, и вместе они составляют жизненный цикл «мульти-водопад». 
Цикл разделен на более мелкие легко создаваемые модули. 
Каждый модуль проходит через фазы определения требований, проектирования, кодирования, внедрения и тестирования.
Процедура разработки по инкрементной модели предполагает выпуск на первом большом этапе продукта в базовой
функциональности, а затем уже последовательное добавление новых функций, так называемых «инкрементов». 
Процесс продолжается до тех пор, пока не будет создана полная система.

----- Когда использовать инкрементную модель? -----
- Когда основные требования к системе четко определены и понятны. В то же время некоторые детали могут дорабатываться с течением времени.
- Требуется ранний вывод продукта на рынок.
- Есть несколько рисковых фич или целей.

Например, мы разрабатываем приложение для знакомств:

Сначала делаем базовую версию, в которой предусмотрено только размещение одной фотографии и краткой информации о себе, а также чат между пользователями.
Добавляем в приложение безопасную авторизацию.
Вводим возможность прикреплять большее количество фотографий и их редактирование.
Внедряем механизм лайков и мэтчей (чат будет включаться только после того, как пользователи поставили друг другу лайки).
Добавляем возможность поиска подходящего знакомства, в т.ч. по геолокации.
Продолжаем так делать, пока приложение не будет соответствовать всем заявленным требованиям.



============== 4. «Iterative Model» (итеративная или итерационная модель) ==============

Итеративная (итерационная) модель – это подход к разработке программного обеспечения, когда небольшими циклами
совершенствуются рабочие версии (итерации), все более и более продвигаясь к идеальному состоянию. 
Изначально понятна только задумка (бизнес-идея), без конкретики финального результата. 
То, в какую сторону нужно совершенствовать – становится понятно после анализа каждой итерации.

Итерационная модель жизненного цикла не требует для начала полной спецификации требований. 
Вместо этого, создание начинается с реализации части функционала, становящейся базой для определения дальнейших требований. 
Этот процесс повторяется. Версия может быть неидеальна, главное, чтобы она работала. 
Понимая конечную цель, мы стремимся к ней так, чтобы каждый шаг был результативен, а каждая версия — работоспособна.

Примером итерационной разработки может служить распознавание голоса. 
Первые исследования и подготовка научного аппарата начались давно, в начале — в мыслях, затем — на бумаге. 
С каждой новой итерацией качество распознавания улучшалось. 
Тем не менее, идеальное распознавание еще не достигнуто, следовательно, задача еще не решена полностью.

----- Когда оптимально использовать итеративную модель? -----
- Требования к конечной системе заранее четко определены и понятны.
- Проект большой или очень большой.
- Основная задача должна быть определена, но детали реализации могут эволюционировать с течением времени.



============== 5. «Spiral Model» (спиральная модель) ==============
«Спиральная модель» похожа на инкрементную, но с акцентом на анализ рисков. Она хорошо работает для решения критически важных бизнес-задач, когда неудача несовместима с деятельностью компании, в условиях выпуска новых продуктовых линеек, при необходимости научных исследований и практической апробации.

Спиральная модель предполагает 4 этапа для каждого витка:
- планирование;
- анализ рисков;
- конструирование;
- оценка результата и при удовлетворительном качестве переход к новому витку.

Преимущества спиральной модели:
- Устранение рисков на ранних этапах реализации проекта. Этот шаг становится ключевым в данной модели.
- Гибкость на всех этапах разработки. Возможность внесения изменений существует на протяжении всего проекта.

Недостатки спиральной модели:
- Длительная и дорогостоящая разработка. Спиральная модель требует больших временных и денежных затрат 
на осуществление основных принципов и привлечение квалифицированных специалистов.
- Высокая зависимость результата от стадии анализа. Если на этом этапе будет допущена ошибка, то изменения проекта потребуют больших издержек.

Применяется спиральная модель в проектах, где необходимо анализировать большое количество рисков. 
Часто используется при разработке спутников и военных объектов.



============== 6. Методология «Agile» (гибкая методология разработки) ==============
Agile — это группа методик для гибкого управления проектами в команде разработки. 
Рабочий процесс при таком подходе разбивается на небольшие временные промежутки, их еще называют спринтами 
(от английского sprint — бег на короткую дистанцию) или итерациями. 
Продолжительность спринтов обычно составляет 2–4 недели.
Во время каждого спринта команда разработки создает часть продукта, которую можно протестировать и оценить. Такой подход позволяет вносить существенные изменения в проект, даже когда разработка в самом разгаре.

Методология Agile — это популярный подход, в котором основное внимание уделяется гибкости, сотрудничеству 
и оптимизации процессов для реализации качественного проекта. 
Это итеративный подход, и приоритет в нем отдается обратной связи от владельца продукта и адаптации к изменяющимся требованиям. 
Цикл разработки ПО по Agile-методологии можно разбить на шесть этапов: 
планирование, проектирование, разработка, тестирование, развертывание и обслуживание.

----- Типы Agile-методологий -----
Agile — это общее название нескольких методик, объединенных идеей гибкости работы. 
В эту группу входят разные методы, например:
--> Scrum. Работа в этой методике строится по итерациям. 
Все задачи, необходимые для завершения продукта, формируются в специальный перечень — бэклог, 
а главная роль отведена заказчику, который определяет вид и функционал продукта.

--> Kanban. В нем упор сделан на визуализации задач на досках и оптимизации рабочего процесса. 
Kanban-команды стремятся сократить время на реализацию проекта и повысить эффективность.

--> Extreme Programming основывается на таких практиках, как парное программирование, 
разработка через тестирование и непрерывная интеграция, то есть постоянное добавление новых элементов 
в основной проект.

