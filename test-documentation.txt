
=============== ТЕСТ-ПЛАН (Test Plan) ===========

Тест план (Test Plan) - это документ, описывающий весь объем работ по тестированию, начиная с описания объекта, 
стратегии, расписания, критериев начала и окончания тестирования, до необходимого в процессе работы оборудования,
специальных знаний, а также оценки рисков с вариантами их разрешения.

Тест план составляет тим-лид, менеджер или старший тестировщик.


------- Виды тест планов -------

Чаще всего на практике приходится сталкиваться со следующими видами тест планов:

--> Мастер Тест План (Master Plan or Master Test Plan);
--> Тест План (Test Plan), назовем его детальный тест план;
--> План Приемочных Испытаний (Product Acceptance Plan) - документ, описывающий набор действий, связанных с приемочным тестированием (стратегия, дата проведения, ответственные работники и т.д.).

Явное отличие Мастер Тест Плана от просто Тест Плана в том, что мастер тест план является более статичным в силу того,
что содержит в себе высокоуровневую (High Level) информацию, которая не подвержена частому изменению в процессе
тестирования и пересмотра требований. 
Сам же детальный тест план, который содержит более конкретную информацию по стратегии, видам тестировании, расписанию
выполнения работ, является "живым" документом, который постоянно претерпевает изменения, отражающие реальное положение дел на проекте.


Что содержит в себе детальный тест план:
1. Идентификатор тест плана
2. Вступление
3. Функции, которые будут протестированы
4. Функции, которые не будут протестированы
5. Тестовые единицы
6. Тестовые подходы/техники
7. Критерии начала и окончания тестирования
8. Критерии остановки, возобновления тестирования
9. Обозначение ответственности тестировщиков
10. Потребность в окружении
11. Другие потребности
12. Тестовые результаты
13. График работ
14. Возможные риски
15. Ответственные лица
16. Утвердившие.




=============== ЧEK-ЛИСТ (Checklist) ===============

Чек-лист (checklist) - это документ, содержащий набор идей по тестированию.
- Оформляется в виде списка проверок;
- Содержит только идею проверки, без детальных инструкций.

Обязательные атрибуты чек-листа:
1) Номер проверки
2) Тест (название проверки)
3) Статус (Результат проверки) (Passed/Failed)
4) Комментарий (обычно содержит ссылку на багрепорт)

Статусы могут быть разными. Например:
- passed — пройдено;
- failed — неудачно;
- blocked — заблокировано;
- skipped — пропущено;
- not run — не работает.

Опциональные атрибуты чек-листа:
5) Ожидаемый результат
6) Шаги 
и др. (но это уже больше похоже на тест-кейс)


Чек-лист в тестировании устроен просто. Обычно он имеет табличную форму, где в каждой строке описана задача, которую нужно выполнить, а напротив каждой задачи есть ячейка для записи ее статуса. 
Например:
______________________________________________________
    Выполняемая задача     |  Статус   |  Комментарии |
---------------------------|-----------|--------------|
Регистрация по e-mail      |  Passed   |              | 
Регистрация через Facebook |  Passed   |              |
Регистрация через VK       |  Failed   |   bug#126    |
-------------------------------------------------------


Чек-листы подходят, если система не очень сложная, а тестированием занимаются специалисты, вовлечённые в продукт. 
Если система многокомпонентная, проверки требуют сложных условий, а тестировать продукт будут менее вовлечённые 
в него люди, лучше потратить время на тест-кейсы.




=============== TЕСТ-КЕЙС (Test Case) ===============

1) Test case (тест-кейс, тестовый пример/случай) - это артефакт, описывающий совокупность шагов, конкретных условий и параметров, необходимых для проверки реализации тестируемой функции или ее части. 
Более строго - формализованное описание одной показательной проверки на соответствие требованиям прямым или косвенным.

2) Тестовый сценарий (test case) - набор входных значений, предусловий выполнения, ожидаемых результатов и постусловий выполнения, 
разработанный для определенной цели или тестового условия, таких как выполнения определенного пути программы 
или же для проверки соответствия определенному требованию. (IEEE 610)


Часто тест-кейсы делят на две категории:
--> Высокоуровневый тест-кейс (high level test case или logical test case) - тест-кейс без конкретных входных данных и ожидаемых результатов. 
Как правило, ограничивается общими идеями и операциями, схож по своей сути с подробно описанным пунктом чек-листа.
Достаточно часто встречается в интеграционном тестировании и системном тестировании, а также на уровне smoke. 
Может служить отправной точкой для проведения исследовательского тестирования или для создания низкоуровневых тест-кейсов.

--> Низкоуровневый тест-кейс (low level test case) - тест-кейс с конкретными входными данными и ожидаемыми результатами. 
Представляет собой «полностью готовый к выполнению» тест-кейс и вообще является наиболее классическим видом тест-кейсов. 
Начинающих тестировщиков чаще всего учат писать именно такие тесты, т.к. прописать все данные подробно - намного проще,
чем понять, какой информацией можно пренебречь, при этом не снизив ценность тест-кейса.



----------- Содержание тест-кейса: -----------

- Идентификатор набора тестов (Test Suite ID): Идентификатор набора тестов, в которых входит этот кейс;
- Идентификатор тестового кейса (Test Case ID): Идентификатор самого кейса;
- Заголовок кейса (Test Case Summary): Краткое и емкое название проводимой проверки;
- Связанное требование (Related Requirement): Идентификатор требования, к которому относится / отслеживается данный тестовый пример;
- Предусловия (Preconditions): действия, которые нужно выполнить, прежде чем приступать к тест-кейсу, а также настройки приложения и тестовой среды. Например, пройти авторизацию для пользователя с правами администратора. При необходимости здесь могут указываться учетные данные.
- Шаги выполнения (Test Script/Procedure): Шаги выполнения теста;
- Постусловия (Postconditions) — список действий, возвращающих систему в исходное состояние (указывается при необходимости).
- Ожидаемый результат (Expected Result): результат, который мы ожидаем получить после выполнения шагов теста;
- Статус (Status) — обозначает результат исполнения тест-кейса или причину, по которой он не может быть исполнен. Success (успех), Failed (провал), Blocked (блокировка) (указывается при необходимости).
- Тестовое окружение (Test Environment): оборудование / программное обеспечение / сеть, в которых выполнялся тест, т.е. все необходимые сведения об окружении, чтобы можно было воспроизвести полученный результат.


------ Опциональные атрибуты тест-кейса: ------
- Заметки (Remarks): Любые комментарии к тесту или выполнению теста;
- Создано (Created By): Имя автора тестового примера;
- Дата создания (Date of Creation): Дата создания тестового примера;
- Выполнено (Executed By): Имя человека, выполнившего тест;
- Дата выполнения (Date of Execution): Дата выполнения теста;



------------ Обязательные атрибуты тест-кейса ------------

У тест-кейса есть обязательные атрибуты, которые должны быть заполнены.
Обязательными атрибутами тест-кейса являются:
1) Номер/идентификатор тест-кейса (Test Case ID) — как правило, присваивается автоматически, зависит от особенностей проекта, может содержать зашифрованные данные о требовании, которое он проверяет, а также другую информацию, представленную в числовом виде.
2) Название тест-кейса (Test Case Title/Summary) - краткое описание сценария, который проверяет данный тест-кейс.
* 3) Предварительные шаги —  описание действий, которые необходимо выполнить, но прямого отношения к проверке они не имеют (например, зарегистрироваться в системе для проверки создания элемента). 
* - Если предварительных шагов нет, то секция НЕ заполняется.
4) Шаги для выполнения тест-кейса (Steps) - порядок действий, чтобы проверить работу функции или выполнение сценария.
5) Ожидаемый результат (Expected Result) — как должна вести себя система после определённых действий.



------------ Пример тест-кейса ------------
Тест-кейс № 1.            ----- (ID)
Создание жильца без ФИО.  ----- (Title)

Шаги:                     
1. Зайти на сайт www.dev_test.ru (логин — test, пароль — test).
2. Войти под учеткой администратора (логин — admin, пароль — 1)
3. Перейти на вкладку «Жильцы».
4. Нажать на кнопку «Создать карточку жильца».
5. Нажать на кнопку «Сохранить», не заполняя никакие данные.

Ожидаемый результат:
Появляется сообщение об ошибке «Заполните обязательные поля, отмеченные * », карточка не сохраняется.



=============== БАГ РЕПОРТ (Bug Report) ===============

1. Баг-репорт (bug report) — это технический документ, который подробно описывает ошибку в работе программы, приложения или другого ПО. 
Его составляет тестировщик, чтобы разработчикам было понятно, что работает неправильно, насколько дефект критичен и что нужно исправить.

2. Баг репорт (bug report) – это документ, содержащий отчет о любом недостатке в компоненте или системе, который может привести компонент или систему к невозможности выполнить требуемую функцию.

3. Баг репорт c определением в самом общем случае – это несоответствие требованиям или функциональным спецификациям (или здравому смыслу). 
То есть это отклонение фактического результата (actual result) от ожидаемого результата (expected result).

Bug report (перевод с англ.) – отчёт о дефекте.



---------- Атрибуты баг репорта ----------

	ID (идентификатор проблемы)
	Project (Название проекта)
	Component (Компонент приложения)
	Version (Номер версии) 
	Issue Type (Тип проблемы)
!!! Summary/Title (Краткое описание)
!!! Severity (Серьёзность)  (отражает технический аспект дефекта)
	Priority* (Приоритет)   (отражает коммерческий аспект дефекта)
	Status (Статус) 
	Precondition (Предусловия)
	Environment (Окружение: ОС, браузер + версия, ...)
	Reporter (Автор, кто открыл)
	Assigned to* (На кого назначен)
!!! STR (Шаги к воспроизведению)
!!! Actual Results (Фактический результат)
!!! Expected Results (Ожидаемый результат)
	Attachment (прикрепленные материалы: скриншоты; видео (скринкасты); логи и т.д.)

	!!! --> обязательные поля.
	*   --> заполняет менеджер проекта.


Описание (Description) – также чрезвычайно важный атрибут. Описание должно быть лаконичным и ясным, как и Summary, но в более развернутой форме. Если есть альтернативные шаги, то их также нужно указать. В описание можно оставлять любые полезные примечания – повторяемость, уточнения и т.п.

Описание (Description) имеет набор атрибутов, которые входят в его состав:
--> Шаги воспроизведения (Steps to Reproduce) – данная информация в отчёте об ошибке является крайне важной. Именно она позволяет разработчику быстро воспроизвести и устранить проблему. Это поле следует заполнять максимально подробно, т.к. будучи незнакомым с внутренней структурой приложения, тестировщик не может знать, какие из выполненных им действий наиболее существенны для диагностирования данной ошибки (steps в тест-кейсе, в какой-то степени, похожи на STR).
--> Фактический Результат (Actual Result)
--> Ожидаемый результат (Expected Result)
--> Прикрепленные файлы (Attachment) – любая информация, которая поможет воспроизвести ситуацию: логи, скриншоты, видео и т.п.
--> Воспроизводимость (Reproducibility) – это поле показывает, воспроизводится ли баг всегда («always») или лишь иногда («sometimes»). Баги, воспроизводящиеся всегда, гораздо проще диагностировать.
--> Возможность «обойти баг» (Workaround) – это поле косвенно влияет на важность и срочность устранения ошибка.
Если некое действие можно выполнить в обход сценария, приводящего к ошибке, поле принимает значение «да» («yes»), в противном случае – поле принимает значение «нет» («no»).


----- Пример Description в баг репорте: -----
Если администратор заходит на страницу приветствия, то логотип пропадает.
Actual result: логотипа нет. (Реальный результат)
Expected result: логотип в правом верхнем углу. (Ожидаемый результат)
Requirement ID: #45 (пункт требований)
Reproduced on: Win10, IE11, 1200x800dpi (на чем воспроизводится)
Reproducibility: sometimes.
Workaround: Да, логотип отображается, если обновить страницу повторно.
For more details, please, see attached files: …


----- Каких правил придерживаться при написании баг-репорта? -----
-> Правило №1: следуйте принципу «1 дефект = 1 баг-репорт». Это позволит сохранить прозрачность процессов на проекте и детально следить за исправлением недочётов.
-> Правило №2: пишите баг-репорт простым и лаконичным языком, ведь от того, насколько быстро разработчик поймёт суть проблемы зависит скорость внесения правок в код.
-> Правило №3: описывайте дефект кратко, но с сохранением максимума полезной информации.
-> Правило №4: удостоверьтесь в воспроизводимости ошибки до заведения баг-репорта, повторите свой алгоритм действий и по возможности сократите число шагов.
-> Правило №5: проверьте, нет ли идентичного дефекта, который уже был зафиксирован.




================= СЕРЬЁЗНОСТЬ и ПРИОРИТЕТ БАГА ================

У бага есть два важных атрибута — приоритет и серьёзность.

Серьезность (Severity) - это атрибут, характеризующий влияние дефекта на работоспособность приложения. 
Серьёзность показывает, насколько баг влияет на возможность работать в программе. Обычно выделяют 5 уровней серьёзности бага. 
Самый опасный — блокирующий баг. Например, мобильное приложение перестало загружаться, и пользователь видит пустой экран. 
Самый безвредный — тривиальный баг. Он не влияет на работу приложения, а многие пользователи его даже не заметят. Это может быть, например, опечатка в разделе меню, куда редко заходят.

По степени влияния на систему серьёзность бага бывает следующих видов:
--> S1 — Блокирующая (Blocker). Приложение не запускается ни на одном устройстве или выдаёт ошибку при загрузке.
Пример: приложение не открывается, поэтому невозможно сделать покупку.
--> S2 — Критическая (Critical). Часть функционала не работает, но это не блокирует процесс.
Пример: Скидка по купону не работает, но товар всё равно можно купить без скидки.
--> S3 — Значительная (Major). Часть логики работает некорректно, но пользователь может решить проблему другим способом.
Пример: поиск в приложении не выдаёт нужный товар, но его можно найти, если искать по брендам.
--> S4 — Незначительная (Minor). Не нарушает логику приложения.
Пример: кнопка «Купить» уехала за экран и видна только наполовину.
--> S5 — Тривиальная (Trivial). Не относится к логике приложения и не влияет на общее качество продукта.
Пример: малозаметная опечатка в меню.


Приоритет (Priority) - это атрибут, указывающий на очередность выполнения задачи или устранения дефекта. 
Можно сказать, что это инструмент менеджера по планированию работ. Чем выше приоритет, тем быстрее нужно исправить дефект.
Приоритет — это критерий, который показывает, насколько быстро нужно исправить дефект. С точки зрения функционала баг может быть несерьёзный, но при этом важный для бизнеса. Обычно выделяют три приоритета:

---> P1 Высокий (High) — исправить в первую очередь. 
Ошибка должна быть исправлена как можно быстрее, т.к. ее наличие является критической для проекта.
---> P2 Средний (Medium) — исправить, когда разобрались с первой категорией багов.
Ошибка должна быть исправлена, ее наличие не является критичной, но требует обязательного решения.
---> P3 Низкий (Low) — исправить, когда разобрались с багами других приоритетов.
Ошибка должна быть исправлена, ее наличие не является критичной, и не требует срочного решения.


На проектах редко используют оба атрибута — в основном объединяют приоритет и серьёзность, или выбирают что-то одно. Чаще всего это приоритет — с точки зрения планирования важно понимать, что исправлять в первую очередь, а что может подождать.
Также в разных проектах названия и количество приоритетов могут отличаться. Например, в списке приоритетов бага в Jira могут быть такие приоритеты: Блокирующий (самый опасный), Критический, Важный, Нулевой (самый безобидный).




=============== ОТЧЕТ О ТЕСТИРОВАНИИ (Test Report) ===============

Отчёт – это документ, содержащий информацию о выполненных действиях, результатах проведённой работы. 
Обычно он включает в себя таблицы, графики, списки, просто описывающую информацию в виде текста. 
Их пропорция и содержание определяют пользу и понятность отчета.

