
==================== ЧТО ТАКОЕ ТЕСТИРОВАНИЕ ====================

Тестирование программного обеспечения (Software Testing) - проверка соответствия между реальным и ожидаемым поведением программы, 
осуществляемая на конечном наборе тестов, выбранном определенным образом.
В более широком смысле, тестирование - это одна из техник контроля качества, включающая в себя активности по 
планированию работ (Test Management), проектированию тестов (Test Design), выполнению тестирования (Test Execution) и анализу полученных результатов (Test Analysis).



==================== ЦЕЛИ ТЕСТИРОВАНИЯ ====================

Три ключевые цели тестирования:
1. Повысить вероятность того, что разрабатываемое приложение будет работать правильно при любых обстоятельствах.
2. Повысить вероятность того, что разрабатываемое приложение будет соотвествовать всем описанным требованиям.
3. Предоставление актуальной информации о состоянии продукта на момент тестирования (предоставление информации 
о статусе готовности заявленной функциональности системы или приложения).

Также можно определить дополнительные цели тестирования:
--> Оценка рисков. Тестирование помогает оценить риски, связанные с продуктом и его функциональностью. 
Это может помочь в принятии решений о дальнейшей разработке и релизе ПО.
--> Улучшение процесса разработки. Тестирование может помочь улучшить процесс разработки ПО. Результаты тестирования могут помочь выявить слабые места в процессе, которые можно улучшить для повышения эффективности и качества разработки.



==================== ЧТО ТАКОЕ КАЧЕСТВО ПО ===================

Качество ПО — это совокупность свойств и характеристик программного обеспечения, которые определяют его способность удовлетворять требованиям и ожиданиям пользователя. 
Оно может быть измерено на основе различных критериев, таких как функциональность, надежность, производительность, удобство использования, безопасность и т. д. 
Качество ПО может быть улучшено с помощью процессов тестирования, анализа, управления изменениями, управления рисками и других методов.



===================== BUG REPORT ========================	
Баг репорт (bug report) – это документ, содержащий отчет о любом недостатке в компоненте или системе, который может привести компонент или систему к невозможности выполнить требуемую функцию.
Bugreport c определением в самом общем случае – это несоответствие требованиям или функциональным спецификациям (или здравому смыслу). То есть это отклонение фактического результата (actual result) от ожидаемого результата (expected result).
Баг-репорт (bug report) — это технический документ, который подробно описывает ошибку в работе программы, приложения или другого ПО. Его составляет тестировщик, чтобы разработчикам было понятно, что работает неправильно, насколько дефект критичен и что нужно исправить.
Bug report (перевод с англ.) – отчёт о дефекте.

	ID (идентификатор проблемы)
	Project (Название проекта)
	Component (Компонент приложения)
	Version (Номер версии) 
	Issue Type (Тип проблемы)
!!! Summary (Краткое описание)
!!! Severity (Серьёзность)  (отражает технический аспект дефекта)
	Priority* (Приоритет)   (отражает коммерческий аспект дефекта)
	Status (Статус) 
	Precondition (Предусловия)
	Environment (Окружение: ОС, браузер + версия, ...)
	Reporter (Автор, кто открыл)
	Assigned to* (На кого назначен)
!!! STR (Шаги к воспроизведению)
!!! Actual Results (Фактический результат)
!!! Expected Results (Ожидаемый результат)
	Attachment (прикрепленные материалы: скриншоты; видео – скринкасты; логи и т.д.)

	!!! --> обязательные поля.
	*   --> заполняет менеджер проекта.


Описание (Description) – также чрезвычайно важный атрибут. Описание должно быть лаконичным и ясным, как и Summary, но в более развернутой форме. Если есть альтернативные шаги, то их также нужно указать. В описание можно оставлять любые полезные примечания – повторяемость, уточнения и т.п.

Описание (Description) имеет набор атрибутов, которые входят в его состав:
--> Шаги воспроизведения (Steps to Reproduce) – данная информация в отчёте об ошибке является крайне важной. Именно она позволяет разработчику быстро воспроизвести и устранить проблему. Это поле следует заполнять максимально подробно, т.к. будучи незнакомым с внутренней структурой приложения, тестировщик не может знать, какие из выполненных им действий наиболее существенны для диагностирования данной ошибки (steps в тест-кейсе, в какой-то степени, похожи на STR).
--> Фактический Результат (Actual Result)
--> Ожидаемый результат (Expected Result)
--> Прикрепленные файлы (Attachment) – любая информация, которая поможет воспроизвести ситуацию: логи, скриншоты, видео и т.п.
--> Воспроизводимость (Reproducibility) – это поле показывает, воспроизводится ли баг всегда («always») или лишь иногда («sometimes»). Баги, воспроизводящиеся всегда, гораздо проще диагностировать.
--> Возможность «обойти баг» (Workaround) – это поле косвенно влияет на важность и срочность устранения ошибка.
Если некое действие можно выполнить в обход сценария, приводящего к ошибке, поле принимает значение «да» («yes»), в противном случае – поле принимает значение «нет» («no»).


Пример Description в баг репорте:
Если администратор заходит на страницу приветствия, то логотип пропадает.
Actual result: логотипа нет. (Реальный результат)
Expected result: логотип в правом верхнем углу. (Ожидаемый результат)
Requirement ID: #45 (пункт требований)
Reproduced on: Win10, IE11, 1200x800dpi (на чем воспроизводится)
Reproducibility: sometimes.
Workaround: Да, логотип отображается, если обновить страницу повторно.
For more details, please, see attached files: …


Каких правил придерживаться при написании баг-репорта?
-> Правило №1: следуйте принципу «1 дефект = 1 баг-репорт». Это позволит сохранить прозрачность процессов на проекте и детально следить за исправлением недочётов.
-> Правило №2: пишите баг-репорт простым и лаконичным языком, ведь от того, насколько быстро разработчик поймёт суть проблемы зависит скорость внесения правок в код.
-> Правило №3: описывайте дефект кратко, но с сохранением максимума полезной информации.
-> Правило №4: удостоверьтесь в воспроизводимости ошибки до заведения баг-репорта, повторите свой алгоритм действий и по возможности сократите число шагов.
-> Правило №5: проверьте, нет ли идентичного дефекта, который уже был зафиксирован.

Если всё в порядке, можно переходить к описанию.




================= ЖИЗНЕННЫЙ ЦИКЛ БАГА ================

Статус бага в репорте определяется его «жизненным циклом», который состоит из четырех основных стадий:
--> Открыт (Opened) — тестировщик выявил баг и добавил в репорт.
--> В работе (In Progress) — о баге сообщили исполнителю, и он занимается исправлением.
--> Исправлен (Ready for check) — исполнитель закончил работу по исправлению бага и передал проект на повторную проверку тестировщику.
--> Закрыт (Closed) — баг устранен и больше не воспроизводится.

Кроме основных есть еще несколько статусов:
-> Отклонен (Rejected) — исправлению бага помешала ошибка в репорте, например неверный алгоритм в пункте «Шаги к воспроизведению».
-> Отсрочен (Deferred) — баг признан неприоритетным и исправление переносится.
-> Переоткрыт (Reopened) — баг был отсрочен или отклонен, но теперь исполнитель взял его в работу.




===================== VERIFICATION and VALIDATION ========================

Verification (Верификация) - это процесс оценки системы или её компонентов с целью определения удовлетворяют ли результаты текущего этапа разработки условиям, требованиям, сформированным в начале этого этапа.
Т.е. выполняются ли наши цели, сроки, задачи по разработке проекта, определённые в начале текущей фазы.
Верификация - это проверки, выполняемые в процессе разработки ПО для ответа на вопрос: “правильно ли мы разрабатываем продукт?”. Это в т.ч. включает проверку документации: requirements specification, design documents, database table design, ER diagrams, test cases, traceability matrix и т.д. Верификация гарантирует, что ПО разрабатывается в соответствии со стандартами и процессами организации, полагаясь на reviews и статические методы тестирования (т.е. без запуска ПО, но, например, с unit/integration tests). Верификация является превентивным подходом (Preventative approach).
Верификация - это подтверждение путем представления объективных доказательств выполнения данным рабочим элементом установленных требований. (ГОСТ 56920)


Validation (Валидация) - это определение соответствия разрабатываемого ПО ожиданиям и потребностям заказчика (пользователя), его требованиям к системе.
Валидация - это процесс оценки конечного продукта, чтобы проверить, соответствует ли он потребностям бизнеса и ожиданиям клиентов, т.е. отвечает на вопрос: “правильный ли мы разработали продукт?”. Валидация является динамическим тестированием, т.е. происходит с помощью выполнения кода и прогона тестов на нём (UAT/CAT, usability, всё что угодно). Валидация является реактивным подходом (Reactive approach).
Валидация демонстрирует, что рабочий элемент может использоваться пользователями для решения определенных ими задач. (ГОСТ 56920)


Если попробовать привести очень упрощенный пример, представим блюдо в ресторане. Верификация будет включать проверку технологической карты, оценку процесса приготовления (температуры, времени и т.п.). На протяжении этого процесса можно будет примерно быть уверенным, что блюдо получится именно тем, какое задумывалось и в итоге формально мы его приготовим. Валидация же - это, по сути, попробовать приготовленное блюдо, чтобы удостовериться, действительно ли получилось то, что ожидал бизнес и клиент.





